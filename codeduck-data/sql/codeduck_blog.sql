/*
SQLyog Ultimate v12.09 (64 bit)
MySQL - 5.7.18-log : Database - codeduck_blog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`codeduck_blog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `codeduck_blog`;

/*Table structure for table `sys_login_log` */

DROP TABLE IF EXISTS `sys_login_log`;

CREATE TABLE `sys_login_log` (
  `username` varchar(100) NOT NULL COMMENT '用户名',
  `login_time` datetime NOT NULL COMMENT '登录时间',
  `location` varchar(255) DEFAULT NULL COMMENT '登录地点',
  `ip` varchar(100) DEFAULT NULL COMMENT 'IP地址'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Data for the table `sys_login_log` */

/*Table structure for table `sys_permission` */

DROP TABLE IF EXISTS `sys_permission`;

CREATE TABLE `sys_permission` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '菜单id',
  `parent_id` bigint(20) DEFAULT NULL COMMENT '上级菜单ID',
  `menu_name` varchar(255) DEFAULT '' COMMENT '菜单名',
  `permission_code` varchar(255) DEFAULT '' COMMENT '权限的代码/通配符,对应代码中@RequiresPermissions 的value',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=404 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='后台权限表';

/*Data for the table `sys_permission` */

insert  into `sys_permission`(`id`,`parent_id`,`menu_name`,`permission_code`) values (1,0,'用户管理',NULL),(2,0,'博客管理',NULL),(3,0,'图片管理',NULL),(4,0,'文件管理',''),(20,1,'用户列表','user:list'),(21,1,'权限管理','role:list'),(30,2,'写博文','blog:write'),(31,2,'博文管理','blog:list'),(32,2,'分类管理','blog-sort:list'),(33,2,'标签管理','blog-tag:list'),(50,3,'图片列表','pic:list'),(51,3,'图片分类','pic-sort:list'),(101,20,'添加用户','user:add'),(102,20,'删除用户','user:delete'),(103,20,'更新用户','user:update'),(201,21,'删除角色','role:delete'),(202,21,'更新角色','role:update'),(203,21,'查看角色','role:view'),(204,21,'添加角色','role:add'),(301,30,'发布博文','blog:add'),(302,31,'删除博文','blog:delete'),(303,31,'更新博文','blog:update'),(321,32,'删除分类','blog-sort:delete'),(322,32,'更新分类','blog-sort:update'),(323,32,'添加分类','blog-sort:add'),(341,33,'删除标签','blog-tag:delete'),(342,33,'更新标签','blog-tag:update'),(343,33,'添加标签','blog-tag:add'),(401,50,'上传图片','pic:add'),(402,50,'删除图片','pic:delete'),(403,50,'更新图片','pic:update');

/*Table structure for table `sys_role` */

DROP TABLE IF EXISTS `sys_role`;

CREATE TABLE `sys_role` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '角色id',
  `role_key` varchar(20) NOT NULL COMMENT '前端路渲染关键词',
  `role_name` varchar(20) NOT NULL COMMENT '角色名',
  `remark` varchar(255) DEFAULT NULL COMMENT '角色名备注信息',
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `deleted` tinyint(1) DEFAULT '0' COMMENT '0：未删除，1已删除',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='后台角色表';

/*Data for the table `sys_role` */

insert  into `sys_role`(`id`,`role_key`,`role_name`,`remark`,`create_time`,`update_time`,`deleted`) values (1,'admin','超级管理员','拥有系统一切权限','2020-11-27 15:29:44','2020-12-03 12:47:43',0),(2,'user','普通用户','没有管理用户信息的权限','2020-11-27 15:29:42','2020-12-03 12:48:43',0),(3,'user','测试角色','','2020-12-03 19:45:25','2020-12-03 19:45:38',1),(4,'user','测试角色','test','2020-12-04 13:50:02','2020-12-04 13:50:04',1),(5,'user','测试角色','仅拥有图片管理全新','2020-12-04 13:50:52','2020-12-04 17:45:52',0),(6,'user','测试角色','test','2020-12-04 13:50:52','2020-12-04 16:05:12',1),(7,'user','测试角色2','斤斤计较','2020-12-04 16:29:01','2020-12-04 20:12:11',0),(8,'user','新添加','123','2020-12-04 16:38:40','2020-12-04 16:38:43',1);

/*Table structure for table `sys_role_permission` */

DROP TABLE IF EXISTS `sys_role_permission`;

CREATE TABLE `sys_role_permission` (
  `role_id` bigint(20) DEFAULT NULL COMMENT '角色id',
  `permission_id` bigint(20) DEFAULT NULL COMMENT '权限id'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='角色-权限关联表';

/*Data for the table `sys_role_permission` */

insert  into `sys_role_permission`(`role_id`,`permission_id`) values (1,2),(1,3),(1,20),(1,21),(1,30),(1,31),(1,32),(1,33),(1,50),(1,51),(1,101),(1,102),(1,103),(1,201),(1,202),(1,203),(1,204),(1,301),(1,302),(1,303),(1,401),(1,402),(1,403),(2,2),(2,3),(2,30),(2,31),(2,32),(2,33),(2,50),(2,51),(2,301),(2,302),(2,303),(2,401),(2,402),(2,403),(1,1),(5,51),(5,403),(5,402),(5,401),(7,51),(7,403),(7,402),(7,401);

/*Table structure for table `sys_user` */

DROP TABLE IF EXISTS `sys_user`;

CREATE TABLE `sys_user` (
  `id` varchar(255) NOT NULL COMMENT '唯一id',
  `username` varchar(35) NOT NULL DEFAULT '' COMMENT '用户名',
  `nickname` varchar(35) DEFAULT '' COMMENT '昵称',
  `password` varchar(50) NOT NULL DEFAULT '' COMMENT '用户密码',
  `login_times` int(10) DEFAULT '0' COMMENT '用户登录次数',
  `status` tinyint(1) DEFAULT '0' COMMENT '0:正常 1：禁止登陆',
  `avatar` varchar(255) DEFAULT '' COMMENT '用户图像',
  `email` varchar(50) DEFAULT '' COMMENT '用户邮箱',
  `birthday` date DEFAULT NULL COMMENT '用户出生日期',
  `mobile` varchar(50) DEFAULT '' COMMENT '用户手机号',
  `qq_number` varchar(25) DEFAULT '' COMMENT '用户qq号',
  `last_login_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '最近登陆时间',
  `creation_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '用户创建时间',
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `deleted` tinyint(1) DEFAULT '0' COMMENT '是否删除0:正常；1删除',
  `region` varchar(100) DEFAULT '北京' COMMENT '用户所在地',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/*Data for the table `sys_user` */

insert  into `sys_user`(`id`,`username`,`nickname`,`password`,`login_times`,`status`,`avatar`,`email`,`birthday`,`mobile`,`qq_number`,`last_login_time`,`creation_time`,`update_time`,`deleted`,`region`) values ('1c3e0b4f46344981121ad4811239c34d','codeduck','纯路人','595f8b3424e45396d0dd9799dae729c2',64,0,'http://localhost:7202/static/img/duck.jpg','1231',NULL,'1231211',NULL,'2020-12-05 19:39:13','2020-10-20 21:07:10','2020-12-04 14:03:26',0,'北京'),('3b813e598aa81cf265bb8b10dfdb4ca2','test','测试用户','595f8b3424e45396d0dd9799dae729c2',12,0,'','13@qq.com',NULL,'112312313123','','2020-12-04 20:16:53','2020-12-04 13:51:21','2020-12-04 17:26:56',0,'北京'),('awsd0b4f46344543121ad4811239c34d','admin','超级管理员','595f8b3424e45396d0dd9799dae729c2',162,0,'http://localhost:8600/upload/images/2020/11/2020119-8e1ceb2a-4c95-4ee3-85ac-730721308d25.jpg','123',NULL,'133333',NULL,'2020-12-06 21:46:53','2020-10-20 20:13:11','2020-11-01 09:50:18',0,'北京'),('ddee9942798c9d66a737c7582e4bccf1','test01','工具人','a716a2221d0b7a3d3109acf8810eed1b',0,0,'','123123',NULL,'123123','','2020-12-04 16:36:38','2020-12-04 16:36:38','2020-12-04 16:36:38',0,'北京'),('e0caed4db941ffcd65c59d1ea9f8c4db','test','测试角色','595f8b3424e45396d0dd9799dae729c2',0,0,'','123',NULL,'123','','2020-12-04 11:56:07','2020-12-04 11:56:07','2020-12-04 13:55:04',1,'北京'),('f20e0819467965e88efa09c4191e9f98','jason','酱油人','595f8b3424e45396d0dd9799dae729c2',119,0,'http://localhost:8600/upload/images/2020/11/2020119-8e1ceb2a-4c95-4ee3-85ac-730721308d25.jpg','111@qq.com',NULL,'13838888888',NULL,'2020-12-04 17:40:56','2020-11-02 20:50:06','2020-11-02 20:50:06',0,'北京');

/*Table structure for table `sys_user_role` */

DROP TABLE IF EXISTS `sys_user_role`;

CREATE TABLE `sys_user_role` (
  `user_id` varchar(255) NOT NULL COMMENT '用户ID',
  `role_id` bigint(20) NOT NULL COMMENT '角色ID'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Data for the table `sys_user_role` */

insert  into `sys_user_role`(`user_id`,`role_id`) values ('awsd0b4f46344543121ad4811239c34d',1),('1c3e0b4f46344981121ad4811239c34d',2),('f20e0819467965e88efa09c4191e9f98',2),('ddee9942798c9d66a737c7582e4bccf1',7),('3b813e598aa81cf265bb8b10dfdb4ca2',5);

/*Table structure for table `tb_blog` */

DROP TABLE IF EXISTS `tb_blog`;

CREATE TABLE `tb_blog` (
  `id` varchar(255) NOT NULL COMMENT '唯一id',
  `admin_id` varchar(50) DEFAULT NULL COMMENT '管理员id',
  `author` varchar(35) DEFAULT NULL COMMENT '作者',
  `title` varchar(255) DEFAULT NULL COMMENT '博文标题',
  `content` longtext COMMENT '博文内容',
  `cover` varchar(255) DEFAULT NULL COMMENT '博文封面',
  `hits` int(11) DEFAULT '0' COMMENT '点击数',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `creation_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `sort_id` varchar(255) DEFAULT NULL COMMENT '博文分类',
  `published` tinyint(1) DEFAULT '1' COMMENT '是否发布：1发布，0不发布',
  `deleted` tinyint(1) DEFAULT '0' COMMENT '是否删除',
  `tag_id` varchar(255) DEFAULT NULL COMMENT '标签id',
  PRIMARY KEY (`id`),
  KEY `article_sort_id` (`sort_id`),
  KEY `tag_id` (`tag_id`),
  CONSTRAINT `tb_blog_ibfk_1` FOREIGN KEY (`sort_id`) REFERENCES `tb_blog_sort` (`id`),
  CONSTRAINT `tb_blog_ibfk_2` FOREIGN KEY (`tag_id`) REFERENCES `tb_blog_tag` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `tb_blog` */

insert  into `tb_blog`(`id`,`admin_id`,`author`,`title`,`content`,`cover`,`hits`,`update_time`,`creation_time`,`sort_id`,`published`,`deleted`,`tag_id`) values ('01fe70031704898b3cf7bb4f73525ce9','','1','佳斯','1','1',1,'2020-11-01 00:07:57','2020-10-26 21:44:38','1',1,1,'4db9100c8500fc694e64df03527211a7'),('0518303c1af4d3122d17bca2977f5333','0','1','佳11','1','1',2,'2020-11-01 00:09:02','2020-10-27 14:41:04','1',1,1,'1'),('05eb73aeeb21f54ef5a0676eb9c6cbbf','0','11','11111r','<p>我</p>\n',NULL,1,'2020-10-27 14:44:58','2020-10-27 14:44:58','1',1,1,'3'),('0730bd0c11da270cafda75e5b9251a71','','codeduck','Elasticsearch的节点和分片','## 1. 节点和分片\n\n下图为3个节点集群，即一个运行Elasticsearch的进行为一个节点，一个索引会通过默认或自定的方式分为多个分片。在下图中有5个主分片和5个副本分片，相同数据的主分片和副本分片不会处于同一节点。\n\n一份分片是一个目录中的文件，Lucene用这些文件存储索引数据。分片也是 Elasticsearch将数据从一个节点迁移到另一个节点的最小单位。\n\n![image-20201119152257469](https://jason-01.oss-cn-hangzhou.aliyuncs.com/public/image/markdown/image-20201119152257469.png)\n\n### 1.1 索引一片文档的过程\n\n默认情况下，当索引一篇文档的时候，系统首先根据文档ID的散列值选择一个主分片，并将文档发送到该主分片。这份主分片可能位于另一个节点，如下图所示：该文档ID的散列值指向的是分片1，但是请求的是节点1，因此节点1中的主分片0将该文档索引到节点2的分片1中。\n\n然后文档被发送到该主分片的所有副本分片进行索引（图左）这使得副本分片和主分片之间保持数据的同步。**数据同步使得副本分片可以服务于搜索请求，并在原有主分片无法访问时自动升级为主分片。**\n\n![image-20201119153255562](https://jason-01.oss-cn-hangzhou.aliyuncs.com/public/image/markdown/image-20201119153255562.png)\n\n**当搜索一个索引时**，Elasticsearch需要在该索引的完整分片集合中进行查找（图右）这些分片可以是主分片，也可以是副本分片，原因是对应的主分片和副本分片通常包含一样的文档。Elasticsearch在索引的主分片和副本分片中进行搜索请求的负载均衡，使得副本分片对于搜索性能和容错都有所帮助。\n\n\n\n### 1.2 主分片和副本分片\n\n**Elasticsearch处理数据的最小单元：分片。**一份分片是 Lucene的索引（一个包含倒排索引的文件目录）。倒排索引的结构使得 Elasticsearch在不扫描所有文档的情况下，就能得知哪些文档包含特定的词条。\n\n**Elasticsearch索引和Lucene索引的对比：**Elasticsearch索引被分解为多块分片。一份分片是一个 Lucene的索引，所以一个 Elasticsearch的索引由多个 Lucene的索引组成。\n\n在图2-5中，聚会（get-together）索引的首个主分片可能包含何种信息。该分片称为 get-together0，它是一个 Lucene索引、一个倒排索引。它默认存储原始文档的内容，再加上些额外的信息，如词条字典和词频。\n\n![image-20201119154506359](https://jason-01.oss-cn-hangzhou.aliyuncs.com/public/image/markdown/image-20201119154506359.png)\n\n根据倒排序索引可以迅速的定位到 查询的文档。如：查询包含denver单词的文档，查表可以发现文档id1，id3匹配该查询条件，而且denver单词在id3中出现的频率比id1高，所以可能id3文档会更加符合查询条件。\n\n**分片分为：主分片和副本分片**。其中副本分片是主分片的完整副本。**副本分片用于搜索，或者是在原有主分片丢失后成为新的主分片。**\nElasticsearch索引由一个或多个主分片以及零个或多个副本分片构成。在图2-6中，可以看到Elasticsearch索引 get-together由6份分片组成：2份主分片（深色的盒子）和4份副本分片（浅色的盒子），每份主分片有2个副本分片。\n\n![image-20201119155025549](https://jason-01.oss-cn-hangzhou.aliyuncs.com/public/image/markdown/image-20201119155025549.png)\n\n**副本分片可以在运行的时候进行添加和移除，而主分片不可以。**\n可以在任何时候改变每个分片的副本分片的数量，因为副本分片总是可以被创建和移除。这并不适用于索引划分为主分片的数量，在创建索引之前，必须决定主分片的数量。1','http://localhost:8600/upload/images/2020/11/2020117-7d54d40d-5a7c-4c4a-9f9c-841eeb0759fe.jpg',65,'2020-11-29 23:26:09','2020-11-11 09:45:49','d1f48976843acc99dd896f17eb320c96',1,0,'568b1d9c93823f903eac48b099165b3a'),('137d801ea9d6811108d846b5feb2dd5a','0','1111111111','21111','<p>222222</p>\n',NULL,3,'2020-10-27 14:38:38','2020-10-27 14:38:38','3',0,1,'4'),('1732f370b151a4827412479a1ee6da18','0','dfasdf','1111111','<p>1</p>\n',NULL,3,'2020-10-27 15:06:03','2020-10-27 15:06:03','1',0,1,'1'),('20a7576f8f9d9b6c481a87e8fbfaa1cf','0','打分','发电房','<p>近四十年你奶奶</p>\n',NULL,1,'2020-10-27 11:56:46','2020-10-27 11:56:46','3',0,1,'2'),('2a6c2e9f277370683a3555b382543ddd','0','2222','22221','<p>222222</p>\n',NULL,1,'2020-10-27 14:24:09','2020-10-27 14:24:09','2',0,1,'3'),('2e325d1236ae700d0cb65bba5b57fe50',NULL,'123','java新特性','<p>测试</p>\n','http://localhost:8600/upload/images/2020/11/2020117-c1c7b0fb-932a-4c60-b0cc-6708ebfb5c65.jpg',321,'2020-11-09 14:44:40','2020-11-02 10:45:04','1',1,0,'3'),('3019d8927ff7bb092449232fb6315848','','111','佳斯特','<p>111</p>\n','http://localhost:8600/upload/images/2020/11/2020117-da332f6e-b980-4593-aa0c-68fdb684d225.jpg',21,'2020-11-09 14:44:29','2020-10-31 23:03:43','1',1,0,'1'),('36012a5bc101ada51193ebc71e02b11c','','codeduck','Post请求参数格式','# Postman中POST请求参数格式\n\n## form-data\n\n`form-data`是http请求中的**multipart/form-data**。它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。既可以上传键值对，也可以上传文件。\n\n当上传的字段是文件时，会有Content-Type：表名文件类型；content-disposition：用来说明字段的一些信息；\n\n![image-20200927213336683](http://codeduck.top/md/images/image-20200927213336683.png)\n\n由于有boundary隔离，所以multipart/form-data既可以上传文件，也可以上传键值对，它采用了键值对的方式，所以可以上传多个文件。\n\n## x-www-form-urlencoded\n\n`x-www-form-urlencoded`是**application/x-www-from-urlencoded**,会将表单内的数据转换为键值对\n\n比如：`name=java&age = 23`\n\n## raw\n\n`raw`可以上传任意格式的文本，可以上传text、json、xml、html等\n\n![image-20200927213705190](http://codeduck.top/md/images/image-20200927213705190.png)\n\n## binary\n\n`binary`相当于**Content-Type:application/octet-stream**。从字面意思得知，只可以上传二进制数据，通常用来上传文件，由于没有键值，所以一次只能上传一个文件。\n\n\n\n## multipart/form-data与x-www-form-urlencoded区别\n\n`multipart/form-data：`既可以上传文件等二进制数据，也可以上传表单键值对，只是最后会转化为一条信息。\n\n`x-www-form-urlencoded：`只能上传键值对，并且键值对都是间隔分开的。\n\n','http://localhost:8600/upload/images/2020/11/2020117-e99fbee8-9271-409c-ad06-33cfdae1d316.jpg',10,'2020-11-22 13:50:05','2020-11-02 15:56:09','2',1,0,'2'),('3c5c80256978d8069200242ed95c6f6f',NULL,'发酵快了但是','打的费','<p>双节快乐的犯法</p>\n',NULL,1,'2020-11-02 10:56:57','2020-11-02 10:56:57','3',0,1,'2'),('3f5c1608ce994a3488b8ebd5575a4bad','','111','佳斯飞','<p>111</p>\n','http://localhost:8600/upload/images/2020/11/2020117-111dce65-5f83-4335-90a1-afffe55a24f2.jpg',0,'2020-11-09 14:44:21','2020-10-31 23:57:18','1',1,0,'1'),('4bcb955df4e1ac6f1eb1daa5471aefac','0','11','czcvzz','<p>111</p>\n',NULL,1,'2020-10-27 15:29:56','2020-10-27 15:29:56','1',0,1,'4'),('5bbbcc7db644ed5f9074309645726505','','admin','测试发文章','请求','http://localhost:8600/upload/images/2020/11/2020117-e99fbee8-9271-409c-ad06-33cfdae1d316.jpg',0,'2020-11-29 23:28:51','2020-11-29 23:28:31','80eff78cfbe6e1f0e5169c4567b7d03b',1,0,'3'),('67d54f2b4551dab1776dffb810c99b55',NULL,'发多少','啊哈哈哈哈','<p>发多少</p>\n','http://localhost:8600/upload/images/2020/11/2020117-bb88a80f-c54d-4fec-9984-4fdddf6a5994.jpg',55,'2020-11-09 14:44:04','2020-11-02 11:09:10','3',1,0,'3'),('751434607f5a1f35020200b9ecd6d760','','codeduck','虚拟机集群配置','**三台虚拟机的网络信息预设**\n\ncentos701（hostname）	 192.168.2.123（IP）	 192.168.2.1（网关）\ncentos702（hostname）	 192.168.2.124（IP）	 192.168.2.1（网关）\ncentos703（hostname）	 192.168.2.125（IP）	 192.168.2.1（网关）\n\n\n\n# 虚拟机集群网络环境配置\n\n**1、在windows中配置VMware Network Adapter VMnet8的网关**\n\n![image-20200721130137503](http://codeduck.top/md/imagesimage-20200721130137503.png)\n\n**2、编辑虚拟机网络编辑器**\n\n> 设置网关、子网、起始IP和结束IP地址\n\n![image-20200721130418119](http://codeduck.top/md/imagesimage-20200721130418119.png)\n\n![image-20200721130506276](http://codeduck.top/md/imagesimage-20200721130506276.png)\n\n\n\n3、配置CentOS网卡信息\n\n```shell\n# 查看网卡信息\n[root@centos701 ~]# ifconfig\n\nens33: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.2.123  netmask 255.255.255.0  broadcast 192.168.2.255\n        inet6 fe80::20c:29ff:fe86:5f95  prefixlen 64  scopeid 0x20<link>\n        ether 00:0c:29:86:5f:95  txqueuelen 1000  (Ethernet)\n        \n        ...\n        \n# 配置网卡ens33\n[root@centos701 ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\n\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=static	# 修改\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=68163d8e-06e4-43dc-9992-c4476a0febb3\nDEVICE=ens33\nONBOOT=yes				# 修改\nIPADDR=192.168.2.123	# 修改\nNETMASK=255.255.255.0	# 修改\nGATEWAY=192.168.2.1		# 修改\nDNS1=114.114.114.114	# 修改\nDNS2=8.8.8.8			# 修改\n\n# 重启网络服务\n[root@centos701 ~]# systemctl restart network\n```\n\n\n\n4、配置主机名\n\n```shell\n[root@centos701 ~]# vi /etc/hostname\ncentos701\n\n# 查看主机名\n[root@centos701 ~]# hostname\n```\n\n\n\n5、配置主机名映射IP地址\n\n> windows中也要添加地址映射 ( IP地址前空一格生效)\n>\n> C:\\Windows\\System32\\drivers\\etc\\hosts\n\n```shell\n[root@centos701 ~]# vi /etc/hosts\n\n192.168.2.123 centos701\n192.168.2.124 centos702\n192.168.2.125 centos703\n```\n\n\n\n6、配置网络服务\n\n```shell\n[root@centos701 ~]# vi /etc/resolv.conf\nnameserver 114.114.114.114\nnameserver 8.8.8.8\n\n# 重启网络服务\n[root@centos701 ~]# systemctl restart network\n```\n\n\n\n7、关闭防火墙 （windows防火墙也要关闭，不然不能从windows访问虚拟机）\n\n```shell\n# 查看防火墙状态\n[root@centos701 ~]# firewall-cmd --state\n\n# 停止防火墙\n[root@centos701 ~]# systemctl stop firewalld.service\n\n# 禁止firewall开机启动\n[root@centos701 ~]# systemctl disable firewalld.service \n```\n\n\n\n8、安装JDK\n\n```shell\n# 新建目录\n mkdir /usr/java\n\n# 上传tar压缩包至 /usr/java中并解压\n tar zxvf jdk-8u152-linux-x64.tar.gz\n\n# 编辑配置文件，并添加一下配置信息\n vi /etc/profile\n\nexport JAVA_HOME=/usr/java/jdk1.8.0_152\nexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport PATH=$PATH:$JAVA_HOME/bin\n\n# 使配置文件生效\nsource /etc/profile\n\n# 查看java版本\njava -version\n```\n\n\n\n9、克隆两个完整的虚拟机 centos702和 centos703\n\n> 克隆完成后做以下事情\n\n- 适当降低两个虚拟机的内存\n- 修改两台虚拟的 `IP` 并删除`UUID`（硬件地址ID删除后自动生成且唯一）\n  - vi /etc/sysconfig/network-scripts/ifcfg-ens33\n- 修改主机名\n  - vi /etc/hostname\n\n\n\n# SSH免秘钥登录\n\n> 生成公钥和私钥，私钥留给本机，公钥发给其他主机\n\n**centos701（其他两台按照此方法操作）**\n\n- 生成密钥：ssh-keygen -t rsa   （一直回车）\n  - 密钥存放位置：/root/.ssh \n  - id_rsa：私钥     \n  - id_rsa.pub：公钥\n\n- 发送私钥（本机）： ssh-copy-id localhost    ， 需要输入centos701节点(root)的密码\n\n- 发送公钥（702/703）：ssh-copy-id centos702/centos703， 需要输入centos702节点(root)的密码\n\n\n\n**测试免秘钥登录centos702**\n\n```shell\nssh centos702\n```\n\n\n\n# scp的使用\n\n![img](http://codeduck.top/md/imagesclipboard.png)\n\n\n\n# rsync的使用\n\n![img](http://codeduck.top/md/imagesclipboard-1595310395688.png)\n\n\n\n推文件：\n\n```shell\nrsync -av /tmp/test.txt  192.168.2.123:/tmp/test.txt\n```\n\n拉文件\n\n```shell\nrsync -av  192.168.2.123:/tmp/test.txt  /tmp/test.txt\n```\n\n指定ssh端口\n\n```shell\nrsync -av -e \"ssh -p 22\" 192.168.2.123:/tmp/a.txt  /tmp/a.txt\n```\n\n\n\n# xsync集群分发脚本\n\n**basename：**获取路径下文件名称\n\n```shell\n[root@CentOS01 bin]# basename /opt/module/kafka/config/consumer.properties  consumer.properties\n```\n\n**dirname:**获取绝对路径信息\n\n```shell\n[root@CentOS01 bin]# dirname /opt/module/kafka/config/consumer.properties      /opt/module/kafka/config\n```\n\n**1、创建群发脚本文件xsync**\n\n```shell\ntouch /usr/local/bin/xsync\n```\n\n**2、配置群发脚本**\n\n```shell\n#!/bin/bash\n#1 获取输入参数个数，如果没有参数，直接退出\npcount=$#\nif((pcount==0)); then\necho no args;\nexit;\nfi\n\n#2 获取文件名称\np1=$1\nfname=`basename $p1`\necho fname=$fname\n\n#3 获取上级目录到绝对路径\npdir=`cd -P $(dirname $p1); pwd`\necho pdir=$pdir\n\n#4 获取当前用户名称\nuser=`whoami`\n\n#5 循环\nfor((host=2; host<4; host++)); do\n        echo ------------------- centos70$host --------------\n        rsync -rvl $pdir/$fname $user@centos70$host:$pdir\ndone\n```\n\n\n\n**修改脚本 xsync 具有执行权限**\n\n```shell\nchmod a+x xsync\n```\n\n\n\n**使用群发**\n\n```shell\n# 直接发送此文件到centos702和centos03对应的目录中\nxsync xxx.x \n```\n\n','http://localhost:8600/upload/images/2020/11/2020117-9cfc209c-c898-423f-99dc-9ab71693c71e.jpg',1,'2020-11-22 13:49:19','2020-11-10 12:01:55','fb64b7f20ab3219fa9f1299662d83d71',1,0,'1'),('768d130589302bad269c4cd4008191f0','','codeduck','Elasticsearch打分机制','# 1. 文档打分的运作\n\n在开始计算得分之时，Elasticsearch使用了被搜索词条的频率以及它有多常见来影响得分。一个简短的解释是，一个词条出现在某个文档中的次数越多，它就越相关。但是，**如果该词条出现在不同的文档的次数越多，它就越不相关。**这一点被称为`TF-IDF`（`TF是词频`，即 term frequency），`IDF是逆文档频率`（inverse document frequency）。\n\n**TF-IDF思想：**如果某个词或短语在一篇文章中出现的频率TF高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类。\n\nTF表示词条在文档d中出现的频率。IDF的主要思想是：如果包含词条t的文档越少，也就是n越小，IDF越大，则说明词条t具有很好的类别区分能力。如果某一类文档C中包含词条t的文档数为m，而其它类包含t的文档总数为k，显然所有包含t的文档数n=m+k，当m大的时候，n也大，按照IDF公式得到的IDF的值会小，就说明该词条t类别区分能力不强。但是实际上，如果一个词条在一个类的文档中频繁出现，则说明该词条能够很好代表这个类的文本的特征，这样的词条应该给它们赋予较高的权重，并选来作为该类文本的特征词以区别与其它类文档。可以利用 此特性过滤掉一些常见词：a、an、the、for等。\n\n**词频TF：**一个分词在文档中出现的次数。即：`某个词在文档中出现的次数 / 文档的总词数`\n\n**逆文档频率IDF：**逆文档频率检查一个单词是否出现在某篇文档中，**而不是在该文档中出现多少次。**\n\n`逆文档频率(IDF) = log(collection 总文档数 / (包含该词的文档数 + 1))`\n\n\n\n**例子：**假如一篇文档的总词语数n=100，而词语“母牛”出现了3次，则“母牛”在该文档中的`词频TF=3/100=0.03`。\n\n`文档频率 (DF)` 的计算方法是测定有多少份文档出现过“母牛”一词，然后除以文档集里包含的文档总数。所以，如果“母牛”一词在1,000份文档出现过，而文档总数是 10,000,000份的话，\n\n则`文档频率DF=1000/10,000,000=0.0001`。\n\n`逆文档频率(IDF) = log(collection 总文档数 / (包含该词的文档数 + 1))`\n\n`TF-IDF得分=词频TF*逆文档频率IDF=词频TF/文档频率DF`。\n\n\n\n**Lucene评分公式（TF-IDF）**\n\n![image-20201114115233515](https://jason-01.oss-cn-hangzhou.aliyuncs.com/public/image/markdown/image-20201114115233515.png)\n\n公式解释：给定`查询q`和`文档d`，其中得分是查询中每个`词条t`的得分总和。而**每个词条的得分**是该词在文档d中的词频的平方根，乘以该词逆文档频率的平方和，乘以该文档字段的归一化因子，乘以该词的提升权重。\n\n','http://localhost:8600/upload/images/2020/11/2020117-819898da-bdce-4923-8e16-8a9a606e775a.jpg',900,'2020-11-22 13:44:46','2020-11-10 13:20:50','2',1,0,'4'),('786c54e540d792235363ea3f35b9a570','0','affasdfd','affafsd','<p>fasdddddddddddddddddddddddddddddd</p>\n',NULL,0,'2020-10-26 21:45:21','2020-10-26 21:45:21','1',1,1,'5'),('7ea2b63a4dd60d61b44cfc148222d735','0','24','234','<p>234</p>\n',NULL,0,'2020-10-27 13:24:00','2020-10-27 13:24:00','2',1,1,'1'),('807854ddf004c6afbe3b0078dabffc41','','codeduck','剪绳子问题','## 14-I. 剪绳子\n\n给你一根长度为 `n` 的绳子，请把绳子剪成整数长度的 `m` 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 `k[0],k[1]...k[m-1]` 。请问 `k[0]*k[1]*...*k[m-1]` 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。\n\n**示例 1：**\n\n```\n输入: 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1\n```\n\n**示例 2:**\n\n```\n输入: 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36\n```\n\n**提示：**\n\n- `2 <= n <= 58`\n\n```java\nclass Solution {\n    public int cuttingRope(int n) {\n        // 绳子长度为3，则可剪为 2,1,所以f(3) = 2 * 1 = 3 -1\n        if (n <= 3) return n-1;\n\n        // f(n) = f(i) * f(n-i)\n        // 所以只需要保证f(i)和f(n-i)是当前绳段的最大乘积即可\n        // 使用dp数组来保存所有绳段的最大乘积\n        // 绳段 2、 3 是最优解，以此为条件向上递推\n        int[] dp = new int[n + 1];\n        dp[2] = 2;\n        dp[3] = 3;\n\n        for (int i = 4; i <= n; i++) {\n            for (int j = 2; j <= i/2; j++) {\n                dp[i] = Math.max(dp[j] * dp[i - j], dp[i]);\n            }\n        }\n        return dp[n];\n    }\n}\n```\n\n## ','http://localhost:8600/upload/images/2020/11/2020117-819898da-bdce-4923-8e16-8a9a606e775a.jpg',11,'2020-11-22 17:29:24','2020-11-02 17:27:08','1',1,0,'1'),('808fcb955698aadbe63b1177ae06d5c2',NULL,'111111111','更给你信','<p>打的费方式</p>\n',NULL,1,'2020-11-02 11:00:58','2020-11-02 11:00:58','2',1,1,'3'),('81ac804470dd8b1cfd467175e16cec55',NULL,'基拉的算法','java 新特性','<p>发达</p>\n',NULL,1,'2020-11-02 10:57:27','2020-11-02 10:57:27','3',1,1,'3c17c5e182c1b4d1ffa8481e46d5efda'),('85e7c7e9c7aeb5ff4ce124752756fb71','0','2222','codduck','<p>22222222222</p>\n',NULL,1,'2020-10-27 14:33:40','2020-10-27 14:33:40','1',1,1,'1'),('87ee37f40952b0e6fa5f0c11727e9dbb','0','1111','1112d','<p>1111</p>\n',NULL,0,'2020-10-27 14:25:37','2020-10-27 14:25:37','1',1,1,'1'),('8df33519a6e743604d7db9ec3ee53971','0','飞 ','d','<p>飞</p>\n',NULL,0,'2020-10-27 14:22:45','2020-10-27 14:22:45','1',1,1,'1'),('9ae5cf79ce4f732c50a8c3f8f0ea9cf4','','codeduck',' CentOS7 常用命令集合','转自：https://blog.csdn.net/qq_40087415/article/details/79367151\n\n## 文件与目录操作\n\n| 命令                    | 解析                                                         |\n| ----------------------- | ------------------------------------------------------------ |\n| cd /home                | 进入 ‘/home’ 目录                                            |\n| cd ..                   | 返回上一级目录                                               |\n| cd ../..                | 返回上两级目录                                               |\n| cd -                    | 返回上次所在目录                                             |\n| cp file1 file2          | 将file1复制为file2                                           |\n| cp -a dir1 dir2         | 复制一个目录                                                 |\n| cp -a /tmp/dir1 .       | 复制一个目录到当前工作目录（.代表当前目录）                  |\n| ls                      | 查看目录中的文件                                             |\n| ls -a                   | 显示隐藏文件                                                 |\n| ls -l                   | 显示详细信息                                                 |\n| ls -lrt                 | 按时间显示文件（l表示详细列表，r表示反向排序，t表示按时间排序） |\n| pwd                     | 显示工作路径                                                 |\n| mkdir dir1              | 创建 ‘dir1’ 目录                                             |\n| mkdir dir1 dir2         | 同时创建两个目录                                             |\n| mkdir -p /tmp/dir1/dir2 | 创建一个目录树                                               |\n| mv dir1 dir2            | 移动/重命名一个目录                                          |\n| rm -f file1             | 删除 ‘file1’                                                 |\n| rm -rf dir1             | 删除 ‘dir1’ 目录及其子目录内容                               |\n\n## 查看文件内容\n\n| 命令          | 解析                                 |\n| ------------- | ------------------------------------ |\n| cat file1     | 从第一个字节开始正向查看文件的内容   |\n| head -2 file1 | 查看一个文件的前两行                 |\n| more file1    | 查看一个长文件的内容                 |\n| tac file1     | 从最后一行开始反向查看一个文件的内容 |\n| tail -3 file1 | 查看一个文件的最后三行               |\n| vi file       | 打开并浏览文件                       |\n\n## 文本内容处理\n\n| 命令                 | 解析                                                    |\n| :------------------- | :------------------------------------------------------ |\n| grep str /tmp/test   | 在文件 ‘/tmp/test’ 中查找 “str”                         |\n| grep ^str /tmp/test  | 在文件 ‘/tmp/test’ 中查找以 “str” 开始的行              |\n| grep [0-9] /tmp/test | 查找 ‘/tmp/test’ 文件中所有包含数字的行                 |\n| grep str -r /tmp/*   | 在目录 ‘/tmp’ 及其子目录中查找 “str”                    |\n| diff file1 file2     | 找出两个文件的不同处                                    |\n| sdiff file1 file2    | 以对比的方式显示两个文件的不同                          |\n| vi file              | :w保存当前修改  :q不保存退出vi  :wq保存当前修改并退出vi |\n\n## 查询操作\n\n| 命令                                             | 解析                                             |\n| ------------------------------------------------ | ------------------------------------------------ |\n| find / -name file1                               | 从 ‘/’ 开始进入根文件系统查找文件和目录          |\n| find / -user user1                               | 查找属于用户 ‘user1’ 的文件和目录                |\n| find /home/user1 -name *.bin                     | 在目录 ‘/ home/user1’ 中查找以 ‘.bin’ 结尾的文件 |\n| find /usr/bin -type f -atime +100                | 查找在过去100天内未被使用过的执行文件            |\n| find /usr/bin -type f -mtime -10                 | 查找在10天内被创建或者修改过的文件               |\n| locate *.ps                                      | 寻找以 ‘.ps’ 结尾的文件，先运行 ‘updatedb’ 命令  |\n| find -name ‘*.[ch]’ \\| xargs grep -E ‘expr’      | 在当前目录及其子目录所有.c和.h文件中查找 ‘expr’  |\n| find -type f -print0 \\| xargs -r0 grep -F ‘expr’ | 在当前目录及其子目录的常规文件中查找 ‘expr’      |\n| find -maxdepth 1 -type f \\| xargs grep -F ‘expr’ | 在当前目录中查找 ‘expr’                          |\n\n## 压缩、解压\n\n| 命令                            | 解析                                                         |\n| ------------------------------- | ------------------------------------------------------------ |\n| bzip2 file1                     | 压缩 file1                                                   |\n| bunzip2 file1.bz2               | 解压 file1.bz2                                               |\n| gzip file1                      | 压缩 file1                                                   |\n| gzip -9 file1                   | 最大程度压缩 file1                                           |\n| gunzip file1.gz                 | 解压 file1.gz                                                |\n| tar -cvf archive.tar file1      | 把file1打包成 archive.tar（-c: 建立压缩档案；-v: 显示所有过程；-f: 使用档案名字) |\n| tar -cvf archive.tar file1 dir1 | 把 file1，dir1 打包成 archive.tar                            |\n| tar -tf archive.tar             | 显示一个包中的内容                                           |\n| tar -xvf archive.tar            | 释放一个包                                                   |\n| tar -xvf archive.tar -C /tmp    | 把压缩包释放到 /tmp目录下                                    |\n| zip file1.zip file1             | 创建一个zip格式的压缩包                                      |\n| zip -r file1.zip file1 dir1     | 把文件和目录压缩成一个zip格式的压缩包                        |\n| unzip file1.zip                 | 解压一个zip格式的压缩包到当前目录                            |\n| unzip test.zip -d /tmp/         | 解压一个zip格式的压缩包到 /tmp 目录                          |\n\n## yum安装器\n\n| 命令                           | 解析                                                |\n| ------------------------------ | --------------------------------------------------- |\n| yum -y install [package]       | 下载并安装一个rpm包                                 |\n| yum localinstall [package.rpm] | 安装一个rpm包，使用你自己的软件仓库解决所有依赖关系 |\n| yum -y update                  | 更新当前系统中安装的所有rpm包                       |\n| yum update [package]           | 更新一个rpm包                                       |\n| yum remove [package]           | 删除一个rpm包                                       |\n| yum list                       | 列出当前系统中安装的所有包                          |\n| yum search [package]           | 在rpm仓库中搜寻软件包                               |\n| yum clean [package]            | 清除缓存目录（/var/cache/yum）下的软件包            |\n| yum clean headers              | 删除所有头文件                                      |\n| yum clean all                  | 删除所有缓存的包和头文件                            |\n\n## 网络相关\n\n| 命令                                            | 解析                   |\n| ----------------------------------------------- | ---------------------- |\n| ifconfig eth0                                   | 显示一个以太网卡的配置 |\n| ifconfig eth0 192.168.1.1 netmask 255.255.255.0 | 配置网卡的IP地址       |\n| ifdown eth0                                     | 禁用 ‘eth0’ 网络设备   |\n| ifup eth0                                       | 启用 ‘eth0’ 网络设备   |\n| iwconfig eth1                                   | 显示一个无线网卡的配置 |\n| iwlist scan                                     | 显示无线网络           |\n| ip addr show                                    | 显示网卡的IP地址       |\n\n## 系统相关\n\n| 命令                                           | 解析                                         |\n| ---------------------------------------------- | -------------------------------------------- |\n| su -                                           | 切换到root权限（与su有区别）                 |\n| shutdown -h now                                | 关机                                         |\n| shutdown -r now                                | 重启                                         |\n| top                                            | 罗列使用CPU资源最多的linux任务 （输入q退出） |\n| pstree                                         | 以树状图显示程序                             |\n| man ping                                       | 查看参考手册（例如ping 命令）                |\n| passwd                                         | 修改密码                                     |\n| df -h                                          | 显示磁盘的使用情况                           |\n| cal -3                                         | 显示前一个月，当前月以及下一个月的月历       |\n| cal 10 1988                                    | 显示指定月，年的月历                         |\n| date –date ‘1970-01-01 UTC 1427888888 seconds’ | 把一相对于1970-01-01 00:00的秒数转换成时间   |','http://localhost:8600/upload/images/2020/11/2020119-c7f34f8d-a17b-4dfb-8ba4-f09722f6d61c.jpg',1,'2020-11-22 13:46:42','2020-11-10 12:58:33','fb64b7f20ab3219fa9f1299662d83d71',1,0,'1'),('a0e480bc761d03eab6fc6c11edb0be64','0','fxcz','11u','<p>1</p>\n',NULL,0,'2020-10-27 15:07:06','2020-10-27 15:07:06','1',1,1,'1'),('a86c3836820ed85b877b4b532174d9ee','','测试','图片添加测试','<p>后返回返回返回</p>\n','http://localhost:8600/upload/images/2020/11/2020117-0eb5121e-b6e4-40c2-81d2-16833663cafe.jpg',31,'2020-11-09 14:24:13','2020-11-09 14:24:13','1',1,0,'1'),('addbd48a38ecf630f89d233187957b98','0','jason','fajlkdfjlaj','<p>1111111111</p>\n',NULL,1,'2020-10-27 14:26:21','2020-10-27 14:26:21','1',1,1,'1'),('b3e5296c2124bc7ae55643a8ca0951ef','0','24','234s1','<p>234</p>\n',NULL,2,'2020-11-09 14:23:51','2020-10-27 13:24:15','d8ca4222ac9a34ee1342e48b1c287479',1,1,'1'),('ba91db1e423c5d9d3acc30b62e3d39e9','0','vz','成功','<p>1</p>\n',NULL,3,'2020-10-27 15:06:26','2020-10-27 15:06:26','1',1,1,'1'),('babb656a396e5fdcc053c408c208c50a',NULL,'啊','打的费11','<p>啊</p>\n','http://localhost:8600/upload/images/2020/11/2020117-960b1921-a6e9-43bd-b694-abd949d5cf68.jpg',7,'2020-11-26 14:34:07','2020-11-02 11:03:11','2',1,0,'3c17c5e182c1b4d1ffa8481e46d5efda'),('bd296447b9ac4c287f6882df3771cb53','0','zvee','111j','<h1>添加</h1>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\n	<tbody>\n		<tr>\n			<td><strong>dwas三碟菜</strong></td>\n			<td>&nbsp;</td>\n		</tr>\n		<tr>\n			<td>&nbsp;</td>\n			<td>&nbsp;</td>\n		</tr>\n		<tr>\n			<td>&nbsp;</td>\n			<td>&nbsp;</td>\n		</tr>\n	</tbody>\n</table>\n\n<pre>\n<code class=\"language-java\">jfkajkdfjkljklf\n</code></pre>\n','http://localhost:8600/upload/images/2020/11/2020117-9cfc209c-c898-423f-99dc-9ab71693c71e.jpg',1,'2020-11-09 14:44:35','2020-10-27 15:33:12','1',1,0,'2'),('c0155dfa406b232915aa7bb0bdcc4469','0','codeduck','131j','123','http://localhost:8600/upload/images/2020/11/2020117-960b1921-a6e9-43bd-b694-abd949d5cf68.jpg',1,'2020-10-24 21:11:15','2020-10-24 21:11:15','1',1,0,'2'),('c507cfd85b0fa63353ba4c5fa9ce0ecb','','codeduck','Systemd指令总结','原文：http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html\n\n## 一、由来\n\n历史上，[Linux 的启动](http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html)一直采用[`init`](https://en.wikipedia.org/wiki/Init)进程。\n\n下面的命令用来启动服务。\n\n> ```bash\n> $ sudo /etc/init.d/apache2 start\n> # 或者\n> $ service apache2 start\n> ```\n\n这种方法有两个缺点。\n\n一是启动时间长。`init`进程是串行启动，只有前一个进程启动完，才会启动下一个进程。\n\n二是启动脚本复杂。`init`进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长。\n\n## 二、Systemd 概述\n\nSystemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套完整的解决方案。\n\n根据 Linux 惯例，字母`d`是守护进程（daemon）的缩写。 Systemd 这个名字的含义，就是它要守护整个系统。\n\n使用了 Systemd，就不需要再用`init`了。Systemd 取代了`initd`，成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程。\n\n> ```bash\n> $ systemctl --version\n> ```\n\n上面的命令查看 Systemd 的版本。\n\nSystemd 的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。事实上，现在还有很多人反对使用 Systemd，理由就是它过于复杂，与操作系统的其他部分强耦合，违反\"keep simple, keep stupid\"的[Unix 哲学](http://www.ruanyifeng.com/blog/2009/06/unix_philosophy.html)。\n\n![img](http://www.ruanyifeng.com/blogimg/asset/2016/bg2016030703.png)\n\n（上图为 Systemd 架构图）\n\n## 三、系统管理\n\nSystemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面。\n\n### 3.1 systemctl\n\n`systemctl`是 Systemd 的主命令，用于管理系统。\n\n> ```bash\n> # 重启系统\n> $ sudo systemctl reboot\n> \n> # 关闭系统，切断电源\n> $ sudo systemctl poweroff\n> \n> # CPU停止工作\n> $ sudo systemctl halt\n> \n> # 暂停系统\n> $ sudo systemctl suspend\n> \n> # 让系统进入冬眠状态\n> $ sudo systemctl hibernate\n> \n> # 让系统进入交互式休眠状态\n> $ sudo systemctl hybrid-sleep\n> \n> # 启动进入救援状态（单用户状态）\n> $ sudo systemctl rescue\n> ```\n\n### 3.2 systemd-analyze\n\n`systemd-analyze`命令用于查看启动耗时。\n\n> ```bash\n> # 查看启动耗时\n> $ systemd-analyze                                                                                       \n> # 查看每个服务的启动耗时\n> $ systemd-analyze blame\n> \n> # 显示瀑布状的启动过程流\n> $ systemd-analyze critical-chain\n> \n> # 显示指定服务的启动流\n> $ systemd-analyze critical-chain atd.service\n> ```\n\n### 3.3 hostnamectl\n\n`hostnamectl`命令用于查看当前主机的信息。\n\n> ```bash\n> # 显示当前主机的信息\n> $ hostnamectl\n> \n> # 设置主机名。\n> $ sudo hostnamectl set-hostname rhel7\n> ```\n\n### 3.4 localectl\n\n`localectl`命令用于查看本地化设置。\n\n> ```bash\n> # 查看本地化设置\n> $ localectl\n> \n> # 设置本地化参数。\n> $ sudo localectl set-locale LANG=en_GB.utf8\n> $ sudo localectl set-keymap en_GB\n> ```\n\n### 3.5 timedatectl\n\n`timedatectl`命令用于查看当前时区设置。\n\n> ```bash\n> # 查看当前时区设置\n> $ timedatectl\n> \n> # 显示所有可用的时区\n> $ timedatectl list-timezones                                                                                   \n> \n> # 设置当前时区\n> $ sudo timedatectl set-timezone America/New_York\n> $ sudo timedatectl set-time YYYY-MM-DD\n> $ sudo timedatectl set-time HH:MM:SS\n> ```\n\n### 3.6 loginctl\n\n`loginctl`命令用于查看当前登录的用户。\n\n> ```bash\n> # 列出当前session\n> $ loginctl list-sessions\n> \n> # 列出当前登录用户\n> $ loginctl list-users\n> \n> # 列出显示指定用户的信息\n> $ loginctl show-user ruanyf\n> ```\n\n## 四、Unit\n\n### 4.1 含义\n\nSystemd 可以管理所有系统资源。不同的资源统称为 Unit（单位）。\n\nUnit 一共分成12种。\n\n> - Service unit：系统服务\n> - Target unit：多个 Unit 构成的一个组\n> - Device Unit：硬件设备\n> - Mount Unit：文件系统的挂载点\n> - Automount Unit：自动挂载点\n> - Path Unit：文件或路径\n> - Scope Unit：不是由 Systemd 启动的外部进程\n> - Slice Unit：进程组\n> - Snapshot Unit：Systemd 快照，可以切回某个快照\n> - Socket Unit：进程间通信的 socket\n> - Swap Unit：swap 文件\n> - Timer Unit：定时器\n\n`systemctl list-units`命令可以查看当前系统的所有 Unit 。\n\n> ```bash\n> # 列出正在运行的 Unit\n> $ systemctl list-units\n> \n> # 列出所有Unit，包括没有找到配置文件的或者启动失败的\n> $ systemctl list-units --all\n> \n> # 列出所有没有运行的 Unit\n> $ systemctl list-units --all --state=inactive\n> \n> # 列出所有加载失败的 Unit\n> $ systemctl list-units --failed\n> \n> # 列出所有正在运行的、类型为 service 的 Unit\n> $ systemctl list-units --type=service\n> ```\n\n### 4.2 Unit 的状态\n\n`systemctl status`命令用于查看系统状态和单个 Unit 的状态。\n\n> ```bash\n> # 显示系统状态\n> $ systemctl status\n> \n> # 显示单个 Unit 的状态\n> $ sysystemctl status bluetooth.service\n> \n> # 显示远程主机的某个 Unit 的状态\n> $ systemctl -H root@rhel7.example.com status httpd.service\n> ```\n\n除了`status`命令，`systemctl`还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。\n\n> ```bash\n> # 显示某个 Unit 是否正在运行\n> $ systemctl is-active application.service\n> \n> # 显示某个 Unit 是否处于启动失败状态\n> $ systemctl is-failed application.service\n> \n> # 显示某个 Unit 服务是否建立了启动链接\n> $ systemctl is-enabled application.service\n> ```\n\n### 4.3 Unit 管理\n\n对于用户来说，最常用的是下面这些命令，用于启动和停止 Unit（主要是 service）。\n\n> ```bash\n> # 立即启动一个服务\n> $ sudo systemctl start apache.service\n> \n> # 立即停止一个服务\n> $ sudo systemctl stop apache.service\n> \n> # 重启一个服务\n> $ sudo systemctl restart apache.service\n> \n> # 杀死一个服务的所有子进程\n> $ sudo systemctl kill apache.service\n> \n> # 重新加载一个服务的配置文件\n> $ sudo systemctl reload apache.service\n> \n> # 重载所有修改过的配置文件\n> $ sudo systemctl daemon-reload\n> \n> # 显示某个 Unit 的所有底层参数\n> $ systemctl show httpd.service\n> \n> # 显示某个 Unit 的指定属性的值\n> $ systemctl show -p CPUShares httpd.service\n> \n> # 设置某个 Unit 的指定属性\n> $ sudo systemctl set-property httpd.service CPUShares=500\n> ```\n\n### 4.4 依赖关系\n\nUnit 之间存在依赖关系：A 依赖于 B，就意味着 Systemd 在启动 A 的时候，同时会去启动 B。\n\n`systemctl list-dependencies`命令列出一个 Unit 的所有依赖。\n\n> ```bash\n> $ systemctl list-dependencies nginx.service\n> ```\n\n上面命令的输出结果之中，有些依赖是 Target 类型（详见下文），默认不会展开显示。如果要展开 Target，就需要使用`--all`参数。\n\n> ```bash\n> $ systemctl list-dependencies --all nginx.service\n> ```\n\n## 五、Unit 的配置文件\n\n### 5.1 概述\n\n每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。\n\nSystemd 默认从目录`/etc/systemd/system/`读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录`/usr/lib/systemd/system/`，真正的配置文件存放在那个目录。\n\n`systemctl enable`命令用于在上面两个目录之间，建立符号链接关系。\n\n> ```bash\n> $ sudo systemctl enable clamd@scan.service\n> # 等同于\n> $ sudo ln -s \'/usr/lib/systemd/system/clamd@scan.service\' \'/etc/systemd/system/multi-user.target.wants/clamd@scan.service\'\n> ```\n\n如果配置文件里面设置了开机启动，`systemctl enable`命令相当于激活开机启动。\n\n与之对应的，`systemctl disable`命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。\n\n> ```bash\n> $ sudo systemctl disable clamd@scan.service\n> ```\n\n配置文件的后缀名，就是该 Unit 的种类，比如`sshd.socket`。如果省略，Systemd 默认后缀名为`.service`，所以`sshd`会被理解成`sshd.service`。\n\n### 5.2 配置文件的状态\n\n`systemctl list-unit-files`命令用于列出所有配置文件。\n\n> ```bash\n> # 列出所有配置文件\n> $ systemctl list-unit-files\n> \n> # 列出指定类型的配置文件\n> $ systemctl list-unit-files --type=service\n> ```\n\n这个命令会输出一个列表。\n\n> ```bash\n> $ systemctl list-unit-files\n> \n> UNIT FILE              STATE\n> chronyd.service        enabled\n> clamd@.service         static\n> clamd@scan.service     disabled\n> ```\n\n这个列表显示每个配置文件的状态，一共有四种。\n\n> - enabled：已建立启动链接\n> - disabled：没建立启动链接\n> - static：该配置文件没有`[Install]`部分（无法执行），只能作为其他配置文件的依赖\n> - masked：该配置文件被禁止建立启动链接\n\n注意，从配置文件的状态无法看出，该 Unit 是否正在运行。这必须执行前面提到的`systemctl status`命令。\n\n> ```bash\n> $ systemctl status bluetooth.service\n> ```\n\n一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生效。\n\n> ```bash\n> $ sudo systemctl daemon-reload\n> $ sudo systemctl restart httpd.service\n> ```\n\n### 5.3 配置文件的格式\n\n配置文件就是普通的文本文件，可以用文本编辑器打开。\n\n`systemctl cat`命令可以查看配置文件的内容。\n\n> ```bash\n> $ systemctl cat atd.service\n> \n> [Unit]\n> Description=ATD daemon\n> \n> [Service]\n> Type=forking\n> ExecStart=/usr/bin/atd\n> \n> [Install]\n> WantedBy=multi-user.target\n> ```\n\n从上面的输出可以看到，配置文件分成几个区块。每个区块的第一行，是用方括号表示的区别名，比如`[Unit]`。注意，配置文件的区块名和字段名，都是大小写敏感的。\n\n每个区块内部是一些等号连接的键值对。\n\n> ```bash\n> [Section]\n> Directive1=value\n> Directive2=value\n> . . .\n> ```\n\n注意，键值对的等号两侧不能有空格。\n\n### 5.4 配置文件的区块\n\n`[Unit]`区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下。\n\n> - `Description`：简短描述\n> - `Documentation`：文档地址\n> - `Requires`：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败\n> - `Wants`：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败\n> - `BindsTo`：与`Requires`类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行\n> - `Before`：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动\n> - `After`：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动\n> - `Conflicts`：这里指定的 Unit 不能与当前 Unit 同时运行\n> - `Condition...`：当前 Unit 运行必须满足的条件，否则不会运行\n> - `Assert...`：当前 Unit 运行必须满足的条件，否则会报启动失败\n\n`[Install]`通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下。\n\n> - `WantedBy`：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入`/etc/systemd/system`目录下面以 Target 名 + `.wants`后缀构成的子目录中\n> - `RequiredBy`：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入`/etc/systemd/system`目录下面以 Target 名 + `.required`后缀构成的子目录中\n> - `Alias`：当前 Unit 可用于启动的别名\n> - `Also`：当前 Unit 激活（enable）时，会被同时激活的其他 Unit\n\n`[Service]`区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下。\n\n> - `Type`：定义启动时的进程行为。它有以下几种值。\n> - `Type=simple`：默认值，执行`ExecStart`指定的命令，启动主进程\n> - `Type=forking`：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n> - `Type=oneshot`：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n> - `Type=dbus`：当前服务通过D-Bus启动\n> - `Type=notify`：当前服务启动完毕，会通知`Systemd`，再继续往下执行\n> - `Type=idle`：若有其他任务执行完毕，当前服务才会运行\n> - `ExecStart`：启动当前服务的命令\n> - `ExecStartPre`：启动当前服务之前执行的命令\n> - `ExecStartPost`：启动当前服务之后执行的命令\n> - `ExecReload`：重启当前服务时执行的命令\n> - `ExecStop`：停止当前服务时执行的命令\n> - `ExecStopPost`：停止当其服务之后执行的命令\n> - `RestartSec`：自动重启当前服务间隔的秒数\n> - `Restart`：定义何种情况 Systemd 会自动重启当前服务，可能的值包括`always`（总是重启）、`on-success`、`on-failure`、`on-abnormal`、`on-abort`、`on-watchdog`\n> - `TimeoutSec`：定义 Systemd 停止当前服务之前等待的秒数\n> - `Environment`：指定环境变量\n\nUnit 配置文件的完整字段清单，请参考[官方文档](https://www.freedesktop.org/software/systemd/man/systemd.unit.html)。\n\n## 六、Target\n\n启动计算机的时候，需要启动大量的 Unit。如果每一次启动，都要一一写明本次启动需要哪些 Unit，显然非常不方便。Systemd 的解决方案就是 Target。\n\n简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于\"状态点\"，启动某个 Target 就好比启动到某种状态。\n\n传统的`init`启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。\n\n> ```bash\n> # 查看当前系统的所有 Target\n> $ systemctl list-unit-files --type=target\n> \n> # 查看一个 Target 包含的所有 Unit\n> $ systemctl list-dependencies multi-user.target\n> \n> # 查看启动时的默认 Target\n> $ systemctl get-default\n> \n> # 设置启动时的默认 Target\n> $ sudo systemctl set-default multi-user.target\n> \n> # 切换 Target 时，默认不关闭前一个 Target 启动的进程，\n> # systemctl isolate 命令改变这种行为，\n> # 关闭前一个 Target 里面所有不属于后一个 Target 的进程\n> $ sudo systemctl isolate multi-user.target\n> ```\n\nTarget 与 传统 RunLevel 的对应关系如下。\n\n> ```bash\n> Traditional runlevel      New target name     Symbolically linked to...\n> \n> Runlevel 0           |    runlevel0.target -> poweroff.target\n> Runlevel 1           |    runlevel1.target -> rescue.target\n> Runlevel 2           |    runlevel2.target -> multi-user.target\n> Runlevel 3           |    runlevel3.target -> multi-user.target\n> Runlevel 4           |    runlevel4.target -> multi-user.target\n> Runlevel 5           |    runlevel5.target -> graphical.target\n> Runlevel 6           |    runlevel6.target -> reboot.target\n> ```\n\n它与`init`进程的主要差别如下。\n\n> （1）默认的 RunLevel（在`/etc/inittab`文件设置）现在被默认的 Target 取代，位置是`/etc/systemd/system/default.target`，通常符号链接到`graphical.target`（图形界面）或者`multi-user.target`（多用户命令行）。\n>\n> （2）启动脚本的位置，以前是`/etc/init.d`目录，符号链接到不同的 RunLevel 目录 （比如`/etc/rc3.d`、`/etc/rc5.d`等），现在则存放在`/lib/systemd/system`和`/etc/systemd/system`目录。\n>\n> （3）配置文件的位置，以前`init`进程的配置文件是`/etc/inittab`，各种服务的配置文件存放在`/etc/sysconfig`目录。现在的配置文件主要存放在`/lib/systemd`目录，在`/etc/systemd`目录里面的修改可以覆盖原始设置。\n\n## 七、日志管理\n\nSystemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用`journalctl`一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是`/etc/systemd/journald.conf`。\n\n`journalctl`功能强大，用法非常多。\n\n> ```bash\n> # 查看所有日志（默认情况下 ，只保存本次启动的日志）\n> $ sudo journalctl\n> \n> # 查看内核日志（不显示应用日志）\n> $ sudo journalctl -k\n> \n> # 查看系统本次启动的日志\n> $ sudo journalctl -b\n> $ sudo journalctl -b -0\n> \n> # 查看上一次启动的日志（需更改设置）\n> $ sudo journalctl -b -1\n> \n> # 查看指定时间的日志\n> $ sudo journalctl --since=\"2012-10-30 18:17:16\"\n> $ sudo journalctl --since \"20 min ago\"\n> $ sudo journalctl --since yesterday\n> $ sudo journalctl --since \"2015-01-10\" --until \"2015-01-11 03:00\"\n> $ sudo journalctl --since 09:00 --until \"1 hour ago\"\n> \n> # 显示尾部的最新10行日志\n> $ sudo journalctl -n\n> \n> # 显示尾部指定行数的日志\n> $ sudo journalctl -n 20\n> \n> # 实时滚动显示最新日志\n> $ sudo journalctl -f\n> \n> # 查看指定服务的日志\n> $ sudo journalctl /usr/lib/systemd/systemd\n> \n> # 查看指定进程的日志\n> $ sudo journalctl _PID=1\n> \n> # 查看某个路径的脚本的日志\n> $ sudo journalctl /usr/bin/bash\n> \n> # 查看指定用户的日志\n> $ sudo journalctl _UID=33 --since today\n> \n> # 查看某个 Unit 的日志\n> $ sudo journalctl -u nginx.service\n> $ sudo journalctl -u nginx.service --since today\n> \n> # 实时滚动显示某个 Unit 的最新日志\n> $ sudo journalctl -u nginx.service -f\n> \n> # 合并显示多个 Unit 的日志\n> $ journalctl -u nginx.service -u php-fpm.service --since today\n> \n> # 查看指定优先级（及其以上级别）的日志，共有8级\n> # 0: emerg\n> # 1: alert\n> # 2: crit\n> # 3: err\n> # 4: warning\n> # 5: notice\n> # 6: info\n> # 7: debug\n> $ sudo journalctl -p err -b\n> \n> # 日志默认分页输出，--no-pager 改为正常的标准输出\n> $ sudo journalctl --no-pager\n> \n> # 以 JSON 格式（单行）输出\n> $ sudo journalctl -b -u nginx.service -o json\n> \n> # 以 JSON 格式（多行）输出，可读性更好\n> $ sudo journalctl -b -u nginx.serviceqq\n> -o json-pretty\n> \n> # 显示日志占据的硬盘空间\n> $ sudo journalctl --disk-usage\n> \n> # 指定日志文件占据的最大空间\n> $ sudo journalctl --vacuum-size=1G\n> \n> # 指定日志文件保存多久\n> $ sudo journalctl --vacuum-time=1years\n> ```\n\n（完）','http://localhost:8600/upload/images/2020/11/2020117-cd88a378-5b26-4eed-9a5a-83513c356b20.jpg',1,'2020-11-22 13:48:34','2020-11-10 12:08:34','fb64b7f20ab3219fa9f1299662d83d71',1,0,'1'),('ceaad3d5eb6d0a30c312a70e532dec67','0','6','2222j','<p>222222</p>\n',NULL,4,'2020-10-27 14:23:42','2020-10-27 14:23:42','2',1,1,'2'),('d5cb36c4ac7cc500680703376e687034','','131','新西特','<p>111111111111111111111111</p>\n\n<p>&crarr;</p>\n','http://localhost:8600/upload/images/2020/11/2020117-e56dcc44-97f8-474d-83e9-b01475b4dc82.jpg',1,'2020-11-09 14:44:46','2020-11-02 10:25:57','fb64b7f20ab3219fa9f1299662d83d71',1,0,'568b1d9c93823f903eac48b099165b3a'),('deaf151464e2d7675db9842c2b3df0af','1','fda','aaa','<p>asdas</p>\n',NULL,0,'2020-10-26 21:48:38','2020-10-26 21:48:38','1',1,1,'2'),('e05f48dee1c7abfa5956613d702f873b','','codeduck1','局域网组件ip','## 各个终端在自组局域网的IP\n\n![image-20201017193004603](http://codeduck.top/md/images/image-20201017193004603.png)\n\n## 服务器\n\n**服务器地址：**`192.168.1.105`\n\n**服务器中转IP：**`192.168.192.169`\n\n## 本地终端\n\n**本地IP地址：**`192.168.1.15`\n\n**服务器中转IP：**`192.168.192.201`\n\n## Redis\n\n本地可访问的IP：\n\n- 本地IP（`192.168.1.15`）\n- Zerotier中的IP：`192.168.192.201`\n\n```shell\n# 服务器端启动\n$ /usr/local/redis/bin/redis-server /usr/local/redis/redis.conf\n\n# 客户端启动地址及端口\n\n# 1.本地ip启动\n$ /usr/local/redis/bin/redis-cli -h 192.168.1.15 -p 6379\n\n# 2.中转ip启动\n$ /usr/local/redis/bin/redis-cli -h 192.168.192.201 -p 6379\n```\n\n**docker启动redis**\n\n```shell\n# 启动redis服务\n$ docker run -d -p 6379:6379  --name redis -v /codeduck/docker/redis/redis.conf:/etc/redis/redis.conf -v /codeduck/docker/redis/data:/data redis:latest redis-server /etc/redis/redis.conf\n\n# 客户端连接：使用主机的中转IP地址连接\n$ /usr/local/redis/bin/redis-cli -h 192.168.192.169 -p 6379\n```\n\n\n\n## Elasticsearch\n\n```shell\n# 服务器端启动\n$ /home/es/elasticsearch-7.6.2/bin/elasticsearch\n```\n\n本地终端只能访问主机的中转IP地址：\n\nhttp://192.168.192.169:9200/\n\n\n\n## Kibana\n\n```shell\n# 服务端启动\n$ /home/es/kibana-7.6.2-linux-x86_64/bin/kibana\n```\n\n本地终端只能访问主机的中转IP地址：\n\nhttp://192.168.192.169:5601/\n\n\n\n## RabbitMQ\n\n主机IP或主机的中转IP\n\nhttp://192.168.192.169:15672/#/\n\nhttp://192.168.1.105:15672/#/\n\n\n\n**docker启动RabbitMQ**\n\n```shell\n# 启动并挂在配置文件\n$ docker run -d -p 5672:5672 -p 15672:15672  --name rabbitmq rabbitmq:management\n\n# 启动web\n$ docker exec -it rabbitmq bash\n	$ rabbitmq-plugins enable rabbitmq_management\n	\n# web访问：使用主机的公网IP访问\nhttp://192.168.192.169:15672/#/\n```\n\n','http://localhost:8600/upload/images/2020/11/2020117-c1c7b0fb-932a-4c60-b0cc-6708ebfb5c65.jpg',800,'2020-11-22 13:43:35','2020-11-10 13:23:23','80eff78cfbe6e1f0e5169c4567b7d03b',1,0,'5'),('e140f1df51eae7c7a4920e0ad57d5759','1','fg','11j','<p>11</p>\n',NULL,1,'2020-10-27 14:36:29','2020-10-27 14:36:29','1',1,1,'4'),('e3d959e337d0fb134d318d63d4f0deff','1','12313','13213','<p>13213dsad</p>\n',NULL,1,'2020-10-26 21:47:22','2020-10-26 21:47:22','1',1,1,'1'),('e559b1cb5ba4aa5eb5d310fe130e1258','1','ss','22jr','<p>222222222222222</p>\n','http://localhost:8600/upload/images/2020/11/2020117-9cfc209c-c898-423f-99dc-9ab71693c71e.jpg',34,'2020-10-27 13:24:45','2020-10-27 13:24:45','2',1,1,'3'),('e5a2f54e6dc4f38ba81b27b702aa617f','','codeduck','Lucene分段详解','## Lucene分段\n\n当Elasticsearch接收到应用发送的文档时，他会将其索引到内存中称为分段（segments）的倒排索引，这些分段不能被改变，只能被删除，这是为了系统更好的缓存分段，较小的分段会定期合并为较大的分段，合并后的分段会自动被删除。然后这些分段会不时的写入磁盘。\n\nElasticsearch对分段的处理有以下几种方式：\n\n- **刷新（refresh）和冲刷（flush）**的频率：`刷新`会让 Elasticsearch**重新打开索引，让新建的文档可用于搜索。**`冲刷`是将索引的数据**从内存写入磁盘**。从性能的角度来看，刷新和冲刷操作都是非常消耗资源的。\n- **合并的策略**：Lucene（Elasticsearch也是如此）将数据存储在不可变的一组文件中，也就是分段中。随着索引的数据越来越多，系统会创建更多的分段。由于在过多的分段中搜索是很慢的，因此在后台小分段会被合并为较大的分段，保持分段的数量可控。不过，合并也是十分消耗性能的，对于IO子系统尤其如此。你可以调节合并的策略，来确定合并多久发生一次，而且分段应该合并到多大。\n- **存储和存储限流**：Elasticsearch调节每秒写入的字节数，来限制合并对于IO系统的影响。\n\n### 刷新和冲刷\n\nElasticsearch被称为近实时（或准实时）索引系统，是因为默认每秒执行一次刷新操作，将未被索引的数据（新建的索引或文档）刷新到内存中。其不足是每次刷新都会影响性能：某些缓存将失效，拖慢请求，重新打开索引的过程也需要一些处理能力，拖慢了索引的建立。因此可根据项目具体情况设置刷新频率。\n\n`刷新`的过程和`内存分段`写入磁盘的过程是相互独立的。实际上，数据首先索引到内存中，经过一次刷新后，Elasticsearch就会搜索相应的内存分段。**将内存中的分段提交到磁盘上的 Lucene索引的过程**，被称为`冲刷`\n`（fush）`，无论分段是否能被搜到，冲刷都会发生。\n\n为了确保某个节点宕机或分片移动位置的时候，内存数据不会丢失，Elasticsearch将使用事物日志来跟踪尚未冲刷的索引操作。除了将内存分段提交到磁盘，冲刷还会清理事物日志。\n\n**触发冲刷的条件如下：**\n\n- 内存缓冲区已满\n- 自上一次冲刷后超过了一定的时间\n- 事务日志达到了一定的阈值\n\n![image-20201119141052901](https://jason-01.oss-cn-hangzhou.aliyuncs.com/public/image/markdown/image-20201119141052901.png)\n\n当冲刷发生的时候，它会在磁盘上创建一个或多个分段。执行一个查询的时候，Elasticsearch\n（通过 Lucene）查看所有的分段，然后将结果合并到一个整体的分片中。搜索的时候每个分片上的结果将被聚集为一个完整的结果集合，然后返回给应用程序。\n关于分段，这里需要记住的关键点是你需要搜索的分段越多，搜索的速度就越慢。为了防止分段的数量失去控制，Elasticsearch（也是通过 Lucene）在后台将多组较小的分段合并为较大的分段。\n\n\n\n### 段的合并及合并策略\n\n由于分段是不变的，它们很容易被缓存，使得搜索更快。此外，修改数据集时，如添加一篇文档，无须重建现有分段中的数据索引。这使得新文档的索引也是很快的。\n\n但是更新文档不能修改实际的文档，只是索引一篇新的文档。如此处理还需要删除原有的文档。而且删除也不能从分段中移除文档（这需要重建倒排索引），只是在单独的`.del文件`中将其标记为“已被删除”。文档只会在分段合并的时候真正地被移除。\n\n**因此合并分段的两个目的：**第一个是将分段的总数量保持在受控的范围内（这用来保障查询的性能）。第二个是真正地删除文档。\n按照已定义的合并策略，分段是在后台进行的。默认的合并策略是分层配置，合并发生在索引、更新或者删除文档的时候，如图10-4所示，该策略将分段划分为多个层次，如果你的分段多于某一层中所设置的最大分段数，该层的合并就会被触发。\n\n![image-20201119142257277](https://jason-01.oss-cn-hangzhou.aliyuncs.com/public/image/markdown/image-20201119142257277.png)\n\n**优化索引：**有了刷新和冲刷，你可以手动触发一次合并。一次强制性的合并也被称为优化（optimize），之所以起这样的名字是因为通常是在一个今后不会更改的索引上运行这个操作，将其优化到一定\n（较低）数量的分段，使得更快的搜索成为可能。\n\n','http://localhost:8600/upload/images/2020/11/2020117-111dce65-5f83-4335-90a1-afffe55a24f2.jpg',1,'2020-11-22 13:42:32','2020-11-10 14:31:27','d1f48976843acc99dd896f17eb320c96',1,0,'568b1d9c93823f903eac48b099165b3a'),('ef80222c9ef869f75c862f517b2bc921','1','sgfe','111r','<p>11</p>\n',NULL,0,'2020-10-27 15:08:28','2020-10-27 15:08:28','1',1,1,'1'),('efc43577d87c97d70cb41d25c2406d66','1','22','2222222222','<p>2222222</p>\n','http://localhost:8600/upload/images/2020/11/2020117-9cfc209c-c898-423f-99dc-9ab71693c71e.jpg',41,'2020-10-27 14:56:32','2020-10-27 14:56:32','2',1,0,'2'),('f45807ae2ad3670972e666ba0fc0c742','1','fda','aaa','<p>asdas</p>\n',NULL,1,'2020-10-26 21:48:29','2020-10-26 21:48:29','1',1,1,'4');

/*Table structure for table `tb_blog_sort` */

DROP TABLE IF EXISTS `tb_blog_sort`;

CREATE TABLE `tb_blog_sort` (
  `id` varchar(32) NOT NULL COMMENT '唯一id',
  `sort_name` varchar(255) DEFAULT NULL COMMENT '分类名称',
  `hits` int(11) DEFAULT '0' COMMENT '点击数',
  `status` tinyint(1) DEFAULT '0' COMMENT '分类状态',
  `sort_index` int(11) DEFAULT '0' COMMENT '排序字段，越大越靠前',
  `creation_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `deleted` tinyint(1) DEFAULT '0' COMMENT '是否被删除',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='博客分类表';

/*Data for the table `tb_blog_sort` */

insert  into `tb_blog_sort`(`id`,`sort_name`,`hits`,`status`,`sort_index`,`creation_time`,`update_time`,`deleted`) values ('1','后端',0,0,0,'2020-10-27 17:35:36','2020-10-27 17:35:39',0),('1f1b9e102f266a7bb027a1074cc0e288','11111',0,0,0,'2020-11-10 14:30:26','2020-11-10 14:30:26',1),('2','前端',0,0,0,'2020-10-27 20:09:33','2020-10-27 20:09:36',0),('3','数据库',0,0,0,'2020-10-27 20:09:38','2020-11-26 14:47:22',0),('4','test',0,0,0,'2020-10-30 17:38:43','2020-10-30 17:38:43',1),('5','计算机操作系统',0,0,0,'2020-10-30 18:44:59','2020-11-03 19:59:20',0),('736ce43d91af5a5fa88afdee7b182c4c','334',0,0,0,'2020-11-26 14:51:37','2020-11-26 14:51:37',1),('80eff78cfbe6e1f0e5169c4567b7d03b','网络',0,0,0,'2020-11-22 13:43:14','2020-11-22 13:43:14',0),('82be70ad071f0c3e477d9087276cb28f','test21',0,0,0,'2020-10-30 19:02:46','2020-10-30 19:02:46',1),('a9102788a64867e6b60c51615e12f82e','VUE',0,0,0,'2020-11-25 23:34:46','2020-11-25 23:34:46',1),('b10b1ed384ba8083967e9ecdd3f3b45f','test',0,0,0,'2020-10-30 19:03:03','2020-10-30 19:03:03',1),('bbccedbfcb7a3927ec048272ea669e65','Elasticsearch',0,0,0,'2020-11-22 13:38:46','2020-11-22 13:38:46',1),('c338c96281933eef3fd1549529f7c1e8','VUe',0,0,0,'2020-11-25 23:35:06','2020-11-25 23:35:06',1),('cc4c677d1adc7932bd13a968ed028f86','Linux11',0,0,0,'2020-11-01 12:24:34','2020-11-01 12:24:34',1),('d1f48976843acc99dd896f17eb320c96','检索',0,0,0,'2020-11-22 13:39:24','2020-11-22 13:39:24',0),('d8ca4222ac9a34ee1342e48b1c287479','Vue',0,0,0,'2020-11-03 20:01:35','2020-11-03 20:01:35',1),('f0a46dd6617dfbea5731435be708f61d','test',0,0,0,'2020-11-23 21:25:13','2020-11-23 21:25:13',1),('fb64b7f20ab3219fa9f1299662d83d71','Linux',0,0,0,'2020-10-31 20:28:14','2020-10-31 20:28:14',0);

/*Table structure for table `tb_blog_tag` */

DROP TABLE IF EXISTS `tb_blog_tag`;

CREATE TABLE `tb_blog_tag` (
  `id` varchar(32) NOT NULL COMMENT '唯一id',
  `tag_name` varchar(1000) DEFAULT NULL COMMENT '标签内容',
  `deleted` tinyint(1) DEFAULT '0' COMMENT '是否删除',
  `status` tinyint(1) DEFAULT '0' COMMENT '标签状态',
  `hits` int(11) DEFAULT '0' COMMENT '标签点击数',
  `creation_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `tag_index` int(11) DEFAULT '0' COMMENT '排序字段，越大越靠前',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='标签表';

/*Data for the table `tb_blog_tag` */

insert  into `tb_blog_tag`(`id`,`tag_name`,`deleted`,`status`,`hits`,`creation_time`,`update_time`,`tag_index`) values ('1','java',0,0,0,'2020-10-30 21:24:41','2020-10-30 21:24:41',5),('1b7f43e0edbdf8621ff5d79de0be4b92','批量测试',1,0,0,'2020-11-03 11:15:54','2020-11-03 11:15:54',0),('2','vue',0,0,0,'2020-10-30 21:24:45','2020-11-06 11:59:48',9),('2678b5e2e920ff5973469e1dc21eaef2','es6',0,0,0,'2020-11-23 21:35:43','2020-11-23 21:35:43',0),('3','mysql',0,0,0,'2020-10-30 21:24:51','2020-10-30 21:24:51',7),('3a475eae5dff064accccc64dbe8661c5','0-2',1,0,0,'2020-10-31 11:38:45','2020-10-31 20:57:05',11),('3c17c5e182c1b4d1ffa8481e46d5efda','gogo11',0,0,0,'2020-10-31 11:37:13','2020-10-31 11:37:13',12),('4','docker',0,0,0,'2020-10-30 21:24:56','2020-11-06 12:00:03',0),('4db9100c8500fc694e64df03527211a7','阿凡达',0,0,0,'2020-11-03 09:15:47','2020-11-03 09:15:47',0),('5','ngix',0,0,0,'2020-10-30 21:25:12','2020-11-06 11:54:16',10),('568b1d9c93823f903eac48b099165b3a','Elasticsearch',0,0,0,'2020-10-31 11:34:55','2020-11-22 13:40:04',11),('6','test',1,0,0,'2020-10-31 10:26:58','2020-10-31 10:26:58',0),('60ebf7be1b93a5c1cb7364ac08372c06','萨达',1,0,0,'2020-11-03 09:30:23','2020-11-03 09:30:23',0),('69dcb63e21fa7033471fec6d7f0a8dfd','老大4',1,0,0,'2020-11-03 09:59:40','2020-11-03 10:07:09',231),('6ba7f0eb7eda6988e02561720b83e5bb','gogo111',1,0,0,'2020-10-31 20:46:53','2020-10-31 20:46:53',0),('7','234',1,0,0,'2020-10-31 10:27:06','2020-10-31 10:27:06',0),('8a198459fb32c4fd915bf8d8ce94c7eb','1但是',1,0,0,'2020-11-03 09:29:32','2020-11-03 09:29:32',0),('b323863d587c98b4e4c5c392d645918b','老大',1,0,0,'2020-11-03 09:30:51','2020-11-03 09:30:51',231),('ce1714850529184340c4f2abd0786e48','jilie',1,0,0,'2020-11-03 16:32:19','2020-11-03 16:32:19',0),('df961a3167bd235d8feb817d465f7ca7','gogo11111',1,0,0,'2020-10-31 11:40:40','2020-10-31 11:40:40',0),('e221052fc54b30cd19eedee30d833ad5','粉否',1,0,0,'2020-11-03 09:10:47','2020-11-03 09:10:47',0);

/*Table structure for table `tb_pic_sort` */

DROP TABLE IF EXISTS `tb_pic_sort`;

CREATE TABLE `tb_pic_sort` (
  `id` varchar(36) NOT NULL COMMENT 'id',
  `sort_name` varchar(255) DEFAULT NULL COMMENT '分类名',
  `deleted` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '是否删除',
  `creation_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='图片分类表';

/*Data for the table `tb_pic_sort` */

/*Table structure for table `tb_picture` */

DROP TABLE IF EXISTS `tb_picture`;

CREATE TABLE `tb_picture` (
  `id` varchar(36) NOT NULL COMMENT 'id',
  `alias` varchar(255) DEFAULT NULL COMMENT '图片别名',
  `original_name` varchar(255) DEFAULT NULL COMMENT '原图片名',
  `pic_name` varchar(255) DEFAULT NULL COMMENT '现图片名',
  `local_url` varchar(255) DEFAULT NULL COMMENT '服务器图片地址',
  `qi_niu_url` varchar(255) DEFAULT NULL COMMENT '七牛云图片地址',
  `md_url` varchar(255) DEFAULT NULL COMMENT 'markdown图片地址',
  `suffix_name` varchar(255) DEFAULT NULL COMMENT '文件后缀名',
  `pic_size` int(20) DEFAULT '0' COMMENT '图片大小',
  `resolution` varchar(36) DEFAULT NULL COMMENT '图片分辨率',
  `deleted` tinyint(1) DEFAULT '0' COMMENT '删除状态',
  `creation_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '上传时间',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='图片信息表';

/*Data for the table `tb_picture` */

insert  into `tb_picture`(`id`,`alias`,`original_name`,`pic_name`,`local_url`,`qi_niu_url`,`md_url`,`suffix_name`,`pic_size`,`resolution`,`deleted`,`creation_time`,`update_time`) values ('004775028a2f275c50620305ed7ae35e','202011974','actor.jpg','2020119-69f59c0f-077c-4bf4-b4d6-aa0ec20a6007.jpg','http://localhost:8600/upload/images/2020/11/2020119-69f59c0f-077c-4bf4-b4d6-aa0ec20a6007.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020119-69f59c0f-077c-4bf4-b4d6-aa0ec20a6007.jpg)','jpg',83288,'960x960',1,'2020-11-09 15:50:40','2020-11-09 15:50:40'),('0d1b90da1032e7cb2002ba012cfcc71c','202011943','2000698.jpg','2020119-c7f34f8d-a17b-4dfb-8ba4-f09722f6d61c.jpg','http://localhost:8600/upload/images/2020/11/2020119-c7f34f8d-a17b-4dfb-8ba4-f09722f6d61c.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020119-c7f34f8d-a17b-4dfb-8ba4-f09722f6d61c.jpg)','jpg',270760,'1080x1920',0,'2020-11-09 15:52:40','2020-11-09 15:52:40'),('0f72c4b133e17b7b307e2a568b4771a1','202011789','2033155.jpg','2020117-157ae157-4804-4159-a713-1f7dc97da654.jpg','http://localhost:8600/upload/images/2020/11/2020117-157ae157-4804-4159-a713-1f7dc97da654.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-157ae157-4804-4159-a713-1f7dc97da654.jpg)','jpg',825755,'1080x1920',0,'2020-11-07 16:45:50','2020-11-07 16:45:50'),('196155dbbdbab76ad0dd54847060704d','202011785','2030196.jpg','2020117-73a2067e-d01f-4618-9a68-372a3bdb1d27.jpg','http://localhost:8600/upload/images/2020/11/2020117-73a2067e-d01f-4618-9a68-372a3bdb1d27.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-73a2067e-d01f-4618-9a68-372a3bdb1d27.jpg)','jpg',730981,'1440x2560',0,'2020-11-07 16:45:49','2020-11-07 16:45:49'),('23df656e06732cd32b61bfdbadb40fd5','202011776','2034268.jpg','2020117-faa41821-d9e0-4663-90b8-361be069b9e1.jpg','http://localhost:8600/upload/images/2020/11/2020117-faa41821-d9e0-4663-90b8-361be069b9e1.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-faa41821-d9e0-4663-90b8-361be069b9e1.jpg)','jpg',750437,'1080x1920',0,'2020-11-07 16:45:50','2020-11-07 16:45:50'),('281196a0ecb21865585491bdf813bcf6','202011748','2034608.jpg','2020117-cd88a378-5b26-4eed-9a5a-83513c356b20.jpg','http://localhost:8600/upload/images/2020/11/2020117-cd88a378-5b26-4eed-9a5a-83513c356b20.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-cd88a378-5b26-4eed-9a5a-83513c356b20.jpg)','jpg',722262,'1080x1920',0,'2020-11-07 16:45:50','2020-11-07 16:45:50'),('2cda2fe4273cc042e9d765ae58e02e75','202011783','2034169.jpg','2020117-9cfc209c-c898-423f-99dc-9ab71693c71e.jpg','http://localhost:8600/upload/images/2020/11/2020117-9cfc209c-c898-423f-99dc-9ab71693c71e.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-9cfc209c-c898-423f-99dc-9ab71693c71e.jpg)','jpg',748301,'1440x2560',0,'2020-11-07 16:45:50','2020-11-07 16:45:50'),('2fe1dc8b2b7460c2cfbc4069862150c5','202011712','2030195.jpg','2020117-111dce65-5f83-4335-90a1-afffe55a24f2.jpg','http://localhost:8600/upload/images/2020/11/2020117-111dce65-5f83-4335-90a1-afffe55a24f2.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-111dce65-5f83-4335-90a1-afffe55a24f2.jpg)','jpg',693109,'1440x2560',0,'2020-11-07 16:45:49','2020-11-07 16:45:49'),('37668f2d4ec5b007c8759779009aa122','202011762','2034606.jpg','2020117-819898da-bdce-4923-8e16-8a9a606e775a.jpg','http://localhost:8600/upload/images/2020/11/2020117-819898da-bdce-4923-8e16-8a9a606e775a.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-819898da-bdce-4923-8e16-8a9a606e775a.jpg)','jpg',838760,'1080x1920',0,'2020-11-07 16:45:50','2020-11-07 16:45:50'),('3b1369fec910a6f4e6f57cb782e1f5c1','202011788','2030828.jpg','2020117-bb88a80f-c54d-4fec-9984-4fdddf6a5994.jpg','http://localhost:8600/upload/images/2020/11/2020117-bb88a80f-c54d-4fec-9984-4fdddf6a5994.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-bb88a80f-c54d-4fec-9984-4fdddf6a5994.jpg)','jpg',902047,'2160x3840',0,'2020-11-07 16:45:49','2020-11-07 16:45:49'),('3be79828dac3f4a989cc843549eec400','202012556','b387.jpg','2020125-8f893db4-98d0-43d1-9115-a666ec41ca4e.jpg','http://localhost:8600/upload/images/2020/12/2020125-8f893db4-98d0-43d1-9115-a666ec41ca4e.jpg',NULL,'![202012](http://localhost:8600/upload/images/2020/12/2020125-8f893db4-98d0-43d1-9115-a666ec41ca4e.jpg)','jpg',63089,'448x448',0,'2020-12-05 20:49:48','2020-12-05 20:49:48'),('3e1930d26a6205094110bde0ef504e03','202011759','1001558.jpg','2020117-7d54d40d-5a7c-4c4a-9f9c-841eeb0759fe.jpg','http://localhost:8600/upload/images/2020/11/2020117-7d54d40d-5a7c-4c4a-9f9c-841eeb0759fe.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-7d54d40d-5a7c-4c4a-9f9c-841eeb0759fe.jpg)','jpg',839752,'1080x1920',0,'2020-11-07 16:45:49','2020-11-07 16:45:49'),('4949b883ef9b5c757edebd725582e555','202012540','2025518.jpg','2020125-3175476d-e4bc-43a8-9c25-c5a22b6ec7d5.jpg','http://localhost:8600/upload/images/2020/12/2020125-3175476d-e4bc-43a8-9c25-c5a22b6ec7d5.jpg',NULL,'![202012](http://localhost:8600/upload/images/2020/12/2020125-3175476d-e4bc-43a8-9c25-c5a22b6ec7d5.jpg)','jpg',766007,'1080x1920',0,'2020-12-05 20:49:24','2020-12-05 20:49:24'),('549692e619ad362e1b8f6a3576181e87','202011737','2032866.jpg','2020117-0eb5121e-b6e4-40c2-81d2-16833663cafe.jpg','http://localhost:8600/upload/images/2020/11/2020117-0eb5121e-b6e4-40c2-81d2-16833663cafe.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-0eb5121e-b6e4-40c2-81d2-16833663cafe.jpg)','jpg',882320,'1080x1920',0,'2020-11-07 16:45:50','2020-11-07 16:45:50'),('5c23319ce63d8c0807ab2d779590fd7b','202011793','2031995.jpg','2020117-960b1921-a6e9-43bd-b694-abd949d5cf68.jpg','http://localhost:8600/upload/images/2020/11/2020117-960b1921-a6e9-43bd-b694-abd949d5cf68.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-960b1921-a6e9-43bd-b694-abd949d5cf68.jpg)','jpg',647359,'1080x1920',0,'2020-11-07 16:45:49','2020-11-07 16:45:49'),('6090506cbb3bc4ec856c20262f8476d5','202011728','2034845.jpg','2020117-e99fbee8-9271-409c-ad06-33cfdae1d316.jpg','http://localhost:8600/upload/images/2020/11/2020117-e99fbee8-9271-409c-ad06-33cfdae1d316.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-e99fbee8-9271-409c-ad06-33cfdae1d316.jpg)','jpg',341207,'1080x1920',0,'2020-11-07 16:45:50','2020-11-07 16:45:50'),('7cbd86d1840a130167eb230b588a7946','202011731','2034041.jpg','2020117-c1c7b0fb-932a-4c60-b0cc-6708ebfb5c65.jpg','http://localhost:8600/upload/images/2020/11/2020117-c1c7b0fb-932a-4c60-b0cc-6708ebfb5c65.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-c1c7b0fb-932a-4c60-b0cc-6708ebfb5c65.jpg)','jpg',604828,'2160x3840',0,'2020-11-07 16:45:50','2020-11-07 16:45:50'),('851ffe3f8578c7902f61efd48497e698','202011765','2034107.jpg','2020117-e56dcc44-97f8-474d-83e9-b01475b4dc82.jpg','http://localhost:8600/upload/images/2020/11/2020117-e56dcc44-97f8-474d-83e9-b01475b4dc82.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-e56dcc44-97f8-474d-83e9-b01475b4dc82.jpg)','jpg',829927,'1440x2560',0,'2020-11-07 16:45:50','2020-11-07 16:45:50'),('8aee1f5d8ca5124ec91892ecebf8be9e','202011729','2000782.jpg','2020117-4a8b9740-d0f0-4c26-8c61-e7cb954130df.jpg','http://localhost:8600/upload/images/2020/11/2020117-4a8b9740-d0f0-4c26-8c61-e7cb954130df.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-4a8b9740-d0f0-4c26-8c61-e7cb954130df.jpg)','jpg',702703,'1080x1920',0,'2020-11-07 16:45:49','2020-11-07 16:45:49'),('99e3c63a9c40761aa585d865b43f24f9','2020112411','微信图片_20201124142410.png','20201124-d86a5335-3d49-46d4-9b44-e535576876a7.png','http://localhost:8600/upload/images/2020/11/20201124-d86a5335-3d49-46d4-9b44-e535576876a7.png',NULL,'![202011](http://localhost:8600/upload/images/2020/11/20201124-d86a5335-3d49-46d4-9b44-e535576876a7.png)','png',3280,'433x653',1,'2020-11-24 14:24:45','2020-11-24 14:24:45'),('9a785d445265b0b5f9bf90e6b89c9a9a','202011776','2031992.jpg','2020117-da332f6e-b980-4593-aa0c-68fdb684d225.jpg','http://localhost:8600/upload/images/2020/11/2020117-da332f6e-b980-4593-aa0c-68fdb684d225.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-da332f6e-b980-4593-aa0c-68fdb684d225.jpg)','jpg',612792,'1080x1920',0,'2020-11-07 16:45:49','2020-11-07 16:45:49'),('a845771e5c1d81efa9ee05416134a75b','202011780','1001062.jpg','2020117-0ecc80cf-c1d3-4397-b02d-86d78e3e44e7.jpg','http://localhost:8600/upload/images/2020/11/2020117-0ecc80cf-c1d3-4397-b02d-86d78e3e44e7.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-0ecc80cf-c1d3-4397-b02d-86d78e3e44e7.jpg)','jpg',1857204,'1440x2560',0,'2020-11-07 16:45:49','2020-11-07 16:45:49'),('aa713612041c88583a9158748a13e75d','202011970','favicon.jpg','2020119-8e1ceb2a-4c95-4ee3-85ac-730721308d25.jpg','http://localhost:8600/upload/images/2020/11/2020119-8e1ceb2a-4c95-4ee3-85ac-730721308d25.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020119-8e1ceb2a-4c95-4ee3-85ac-730721308d25.jpg)','jpg',38505,'449x449',0,'2020-11-09 15:02:46','2020-11-09 15:02:46'),('bedc4a70fef1c1a660d78184b4b6f345','20201176','2031005.jpg','2020117-3f47f5be-9605-43b0-a815-2c9d49d5d516.jpg','http://localhost:8600/upload/images/2020/11/2020117-3f47f5be-9605-43b0-a815-2c9d49d5d516.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-3f47f5be-9605-43b0-a815-2c9d49d5d516.jpg)','jpg',687684,'1080x1920',0,'2020-11-07 16:45:49','2020-11-07 16:45:49'),('f15fc44e95efc5b8ae18d9a488868e51','2020112495','placeholder.jpg','20201124-c9368084-9af8-4bb5-879e-70d28c1ebe92.jpg','http://localhost:8600/upload/images/2020/11/20201124-c9368084-9af8-4bb5-879e-70d28c1ebe92.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/20201124-c9368084-9af8-4bb5-879e-70d28c1ebe92.jpg)','jpg',5474,'390x585',0,'2020-11-24 14:37:47','2020-11-24 14:37:47'),('fffd9d4fef200ea7a4df36143743db25','20201170','2030199.jpg','2020117-972d7749-3c0e-420f-9b42-a0625eb8bf7d.jpg','http://localhost:8600/upload/images/2020/11/2020117-972d7749-3c0e-420f-9b42-a0625eb8bf7d.jpg',NULL,'![202011](http://localhost:8600/upload/images/2020/11/2020117-972d7749-3c0e-420f-9b42-a0625eb8bf7d.jpg)','jpg',816112,'1440x2560',0,'2020-11-07 16:45:49','2020-11-07 16:45:49');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
